{"ast":null,"code":"import _classCallCheck from \"/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/src/components/UserValidNewCoreEntry.js\";\nimport React from 'react';\nimport { Button, Alert } from 'reactstrap';\nimport * as transactionManipulations from '../api/transactionManipulations';\nimport moment from 'moment';\n\nvar UserValidNewCoreEntry =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(UserValidNewCoreEntry, _React$Component);\n\n  function UserValidNewCoreEntry() {\n    _classCallCheck(this, UserValidNewCoreEntry);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(UserValidNewCoreEntry).apply(this, arguments));\n  }\n\n  _createClass(UserValidNewCoreEntry, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          transactions = _this$props.transactions,\n          initials = _this$props.initials,\n          logInNewEntry = _this$props.logInNewEntry,\n          timeBoundry = _this$props.timeBoundry;\n      var currentTime = Date.now();\n      var weekBoundries = {\n        lowerBoundry: timeBoundry.lowerBoundry,\n        upperBoundry: timeBoundry.upperBoundry\n      };\n      var entriesInformation = transactionManipulations.countOfEntriesByDay(initials, transactions, weekBoundries);\n      var numberOfDaysWithAnEntryThisWeek = transactionManipulations.numberOfEntryDays(entriesInformation);\n      var hasValidGloveSampleForToday = transactionManipulations.forTimePointAndUserIsThereGloveSample(initials, transactions, currentTime);\n      var numberOfGownSamplesThisWeek = transactionManipulations.countOfGownSamplesInTimePeriodForUser(initials, transactions, weekBoundries);\n      var hasValidGownSamples = false;\n\n      if (numberOfDaysWithAnEntryThisWeek <= 1) {\n        hasValidGownSamples = false;\n      } else if (numberOfDaysWithAnEntryThisWeek >= 2) {\n        if (numberOfGownSamplesThisWeek >= 2) {\n          hasValidGownSamples = true;\n        } else {\n          hasValidGownSamples = false;\n        }\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, initials), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, initials, \" has entered the core \", numberOfDaysWithAnEntryThisWeek, \" times this week\", initials, \" has \", numberOfGownSamplesThisWeek, \" valid gown samples this week\", hasValidGloveSampleForToday ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, initials, \" has a valid glove sample in +/- 12 hours from \", currentTime) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, initials, \" does not have a valid glove sample in +/- 12 hours from \", moment(currentTime).format('DDMMMYY HH:mm:ss')), hasValidGloveSampleForToday ? React.createElement(Alert, {\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Gloves are good\") : React.createElement(Alert, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Need glove samples \"), hasValidGownSamples ? React.createElement(Alert, {\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Gown samples are good\") : React.createElement(Alert, {\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Need gown samples \")), React.createElement(Button, {\n        color: \"primary\",\n        onClick: logInNewEntry,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Log \", initials, \" in to core\"));\n    }\n  }]);\n\n  return UserValidNewCoreEntry;\n}(React.Component);\n\nexport { UserValidNewCoreEntry as default };","map":{"version":3,"sources":["/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/src/components/UserValidNewCoreEntry.js"],"names":["React","Button","Alert","transactionManipulations","moment","UserValidNewCoreEntry","props","transactions","initials","logInNewEntry","timeBoundry","currentTime","Date","now","weekBoundries","lowerBoundry","upperBoundry","entriesInformation","countOfEntriesByDay","numberOfDaysWithAnEntryThisWeek","numberOfEntryDays","hasValidGloveSampleForToday","forTimePointAndUserIsThereGloveSample","numberOfGownSamplesThisWeek","countOfGownSamplesInTimePeriodForUser","hasValidGownSamples","format","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,YAA9B;AACA,OAAO,KAAKC,wBAAZ,MAA0C,iCAA1C;AACA,OAAOC,MAAP,MAAmB,QAAnB;;IAGqBC,qB;;;;;;;;;;;;;6BAGR;AAAA,wBACwD,KAAKC,KAD7D;AAAA,UACEC,YADF,eACEA,YADF;AAAA,UACgBC,QADhB,eACgBA,QADhB;AAAA,UAC0BC,aAD1B,eAC0BA,aAD1B;AAAA,UACyCC,WADzC,eACyCA,WADzC;AAEL,UAAIC,WAAW,GAAGC,IAAI,CAACC,GAAL,EAAlB;AACA,UAAIC,aAAa,GAAG;AAChBC,QAAAA,YAAY,EAACL,WAAW,CAACK,YADT;AAEhBC,QAAAA,YAAY,EAACN,WAAW,CAACM;AAFT,OAApB;AAIA,UAAIC,kBAAkB,GAAGd,wBAAwB,CAACe,mBAAzB,CAA6CV,QAA7C,EAAsDD,YAAtD,EAAmEO,aAAnE,CAAzB;AACA,UAAIK,+BAA+B,GAAGhB,wBAAwB,CAACiB,iBAAzB,CAA2CH,kBAA3C,CAAtC;AACA,UAAII,2BAA2B,GAAGlB,wBAAwB,CAACmB,qCAAzB,CAA+Dd,QAA/D,EAAwED,YAAxE,EAAqFI,WAArF,CAAlC;AACA,UAAIY,2BAA2B,GAAGpB,wBAAwB,CAACqB,qCAAzB,CAA+DhB,QAA/D,EAAwED,YAAxE,EAAqFO,aAArF,CAAlC;AACA,UAAIW,mBAAmB,GAAG,KAA1B;;AACA,UAAIN,+BAA+B,IAAI,CAAvC,EAA0C;AACtCM,QAAAA,mBAAmB,GAAG,KAAtB;AACH,OAFD,MAEO,IAAIN,+BAA+B,IAAI,CAAvC,EAAyC;AAC5C,YAAII,2BAA2B,IAAG,CAAlC,EAAqC;AACjCE,UAAAA,mBAAmB,GAAG,IAAtB;AACH,SAFD,MAEO;AACHA,UAAAA,mBAAmB,GAAG,KAAtB;AACH;AACJ;;AACD,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKjB,QAAL,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKA,QADL,4BACqCW,+BADrC,sBAEKX,QAFL,WAEoBe,2BAFpB,mCAGKF,2BAA2B,GAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMb,QAAN,qDAA+DG,WAA/D,CAAD,GAAmF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMH,QAAN,+DAAyEJ,MAAM,CAACO,WAAD,CAAN,CAAoBe,MAApB,CAA2B,kBAA3B,CAAzE,CAHnH,EAICL,2BAA2B,GAAC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAD,GAAkD,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAJ9E,EAKCI,mBAAmB,GAAC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAD,GAAwD,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAL5E,CAFJ,EASI,oBAAC,MAAD;AACI,QAAA,KAAK,EAAC,SADV;AAEI,QAAA,OAAO,EAAEhB,aAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAISD,QAJT,gBATJ,CADJ;AAkBL;;;;EA1CgDR,KAAK,CAAC2B,S;;SAApCtB,qB","sourcesContent":["import React from 'react';\nimport { Button, Alert } from 'reactstrap';\nimport * as transactionManipulations from '../api/transactionManipulations';\nimport moment from 'moment';\n\n\nexport default class UserValidNewCoreEntry extends React.Component {\n  \n  \n    render() {\n        const {transactions, initials, logInNewEntry, timeBoundry} = this.props;\n        let currentTime = Date.now();\n        let weekBoundries = {\n            lowerBoundry:timeBoundry.lowerBoundry,\n            upperBoundry:timeBoundry.upperBoundry\n        }\n        let entriesInformation = transactionManipulations.countOfEntriesByDay(initials,transactions,weekBoundries);\n        let numberOfDaysWithAnEntryThisWeek = transactionManipulations.numberOfEntryDays(entriesInformation);\n        let hasValidGloveSampleForToday = transactionManipulations.forTimePointAndUserIsThereGloveSample(initials,transactions,currentTime);\n        let numberOfGownSamplesThisWeek = transactionManipulations.countOfGownSamplesInTimePeriodForUser(initials,transactions,weekBoundries);\n        let hasValidGownSamples = false;\n        if (numberOfDaysWithAnEntryThisWeek <= 1) {\n            hasValidGownSamples = false;\n        } else if (numberOfDaysWithAnEntryThisWeek >= 2){\n            if (numberOfGownSamplesThisWeek >=2) {\n                hasValidGownSamples = true;\n            } else {\n                hasValidGownSamples = false;\n            }\n        } \n        return (\n            <div>\n                <h3>{initials}</h3> \n                <p>\n                    {initials} has entered the core {numberOfDaysWithAnEntryThisWeek} times this week\n                    {initials} has {numberOfGownSamplesThisWeek} valid gown samples this week\n                    {hasValidGloveSampleForToday?<div>{initials} has a valid glove sample in +/- 12 hours from {currentTime}</div>:<div>{initials} does not have a valid glove sample in +/- 12 hours from {moment(currentTime).format('DDMMMYY HH:mm:ss')}</div>}\n                {hasValidGloveSampleForToday?<Alert color='secondary'>Gloves are good</Alert>:<Alert color='danger'>Need glove samples </Alert>}\n                {hasValidGownSamples?<Alert color='secondary'>Gown samples are good</Alert>:<Alert color='danger'>Need gown samples </Alert>}\n                </p>\n                <Button \n                    color=\"primary\"\n                    onClick={logInNewEntry}\n                >\n                    Log {initials} in to core\n                </Button>\n            </div>\n        );\n  }\n}"]},"metadata":{},"sourceType":"module"}