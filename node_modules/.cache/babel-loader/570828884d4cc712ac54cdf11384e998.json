{"ast":null,"code":"import * as types from './actionTypes';\nimport axios from 'axios';\nimport { beginAjaxCall, ajaxCallError } from './ajaxStatusActions';\nexport function getUsersInCoreSuccess(payload) {\n  return {\n    type: types.GET_USERS_IN_CORE_SUCCESS,\n    payload: payload\n  };\n}\n;\nexport function getUsersInCore() {\n  return function (dispatch) {\n    dispatch(beginAjaxCall());\n    axios.get('http://50.19.1.144:3000/usersincore').then(function (response) {\n      var payload = response.data;\n      dispatch(getUsersInCoreSuccess(payload));\n    }).catch(function (error) {\n      dispatch(ajaxCallError());\n      throw error;\n    });\n  };\n}\n;\nexport function getTransactionsInTimePeriodSuccess(payload) {\n  return {\n    type: types.GET_TRANSACTIONS_IN_TIME_PERIOD_SUCCESS,\n    payload: payload\n  };\n}\n;\nexport function getTransactionsInTimePeriod(timeBoundries) {\n  console.log('got here');\n  return function (dispatch) {\n    dispatch(beginAjaxCall());\n    axios.post('http://50.19.1.144:3000/transactionsintimeperiod', timeBoundries).then(function (response) {\n      var payload = response.data;\n      dispatch(getTransactionsInTimePeriodSuccess(payload));\n    }).catch(function (error) {\n      dispatch(ajaxCallError());\n      throw error;\n    });\n  };\n}\n;\nexport function logNewEntrySuccess(payload) {\n  return {\n    type: types.LOG_NEW_ENTRY_SUCCESS,\n    payload: payload\n  };\n}\nexport function logNewEntry(newEntryTransaction) {\n  return function (dispatch) {\n    dispatch(beginAjaxCall());\n    console.log('called new entry procedure');\n    axios.post('http://50.19.1.144:3000/newentry', newEntryTransaction).then(function (response) {\n      console.log('response from new entry');\n      var payload = response.data;\n      dispatch(logNewEntrySuccess(payload));\n    }).catch(function (error) {\n      dispatch(ajaxCallError());\n      throw error;\n    });\n  };\n}\n;\nexport function clearExistingEntrySuccess(payload) {\n  return {\n    type: types.CLEAR_EXISTING_ENTRY_SUCCESS,\n    payload: payload\n  };\n}\n;\nexport function clearExistingEntry(existingTransactionID) {\n  return function (dispatch) {\n    dispatch(beginAjaxCall());\n    axios.post('http://50.19.1.144:3000/systemclearedtransaction', existingTransactionID).then(function (response) {\n      console.log('got response from clearing existing');\n      var payload = response;\n      dispatch(clearExistingEntrySuccess(payload));\n    }).catch(function (error) {\n      dispatch(ajaxCallError());\n      throw error;\n    });\n  };\n}\n;","map":{"version":3,"sources":["/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/src/actions/transactionActions.js"],"names":["types","axios","beginAjaxCall","ajaxCallError","getUsersInCoreSuccess","payload","type","GET_USERS_IN_CORE_SUCCESS","getUsersInCore","dispatch","get","then","response","data","catch","error","getTransactionsInTimePeriodSuccess","GET_TRANSACTIONS_IN_TIME_PERIOD_SUCCESS","getTransactionsInTimePeriod","timeBoundries","console","log","post","logNewEntrySuccess","LOG_NEW_ENTRY_SUCCESS","logNewEntry","newEntryTransaction","clearExistingEntrySuccess","CLEAR_EXISTING_ENTRY_SUCCESS","clearExistingEntry","existingTransactionID"],"mappings":"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","sourcesContent":["import * as types from './actionTypes';\nimport axios from 'axios';\nimport {beginAjaxCall, ajaxCallError} from './ajaxStatusActions';\n\nexport function getUsersInCoreSuccess(payload) {\n    return ({type: types.GET_USERS_IN_CORE_SUCCESS, payload});\n};\nexport function getUsersInCore(){\n    return function (dispatch) {\n        dispatch(beginAjaxCall());\n        axios.get('http://50.19.1.144:3000/usersincore')\n            .then(function (response) {\n                let payload = response.data;\n                dispatch(getUsersInCoreSuccess(payload));\n            })\n            .catch(error => {\n                dispatch(ajaxCallError());\n                throw(error);\n            });\n    };\n};\n\nexport function getTransactionsInTimePeriodSuccess(payload){\n    return ({type: types.GET_TRANSACTIONS_IN_TIME_PERIOD_SUCCESS, payload});\n};\nexport function getTransactionsInTimePeriod(timeBoundries){\n    console.log('got here');\n    return function (dispatch) {\n        dispatch(beginAjaxCall());\n        axios.post('http://50.19.1.144:3000/transactionsintimeperiod', timeBoundries)\n            .then(function (response) {\n                let payload = response.data;\n                dispatch(getTransactionsInTimePeriodSuccess(payload));\n            })\n            .catch(error => {\n                dispatch(ajaxCallError());\n                throw(error);\n            });\n    }; \n};\n\nexport function logNewEntrySuccess(payload) {\n    return ({type: types.LOG_NEW_ENTRY_SUCCESS, payload});\n}\nexport function logNewEntry(newEntryTransaction) {\n    return function (dispatch) {\n        dispatch(beginAjaxCall());\n        console.log('called new entry procedure')\n        axios.post('http://50.19.1.144:3000/newentry', newEntryTransaction)\n            .then(function (response) {\n                console.log('response from new entry')\n                let payload = response.data;\n                dispatch(logNewEntrySuccess(payload));\n            })\n            .catch(error => {\n                dispatch(ajaxCallError());\n                throw(error);\n            });\n    }; \n};\n\nexport function clearExistingEntrySuccess(payload){\n    return ({type: types.CLEAR_EXISTING_ENTRY_SUCCESS, payload});\n};\nexport function clearExistingEntry(existingTransactionID){\n    return function(dispatch) {\n        dispatch(beginAjaxCall());\n        axios.post('http://50.19.1.144:3000/systemclearedtransaction', existingTransactionID)\n            .then(response =>{\n                console.log('got response from clearing existing')\n                let payload = response;\n                dispatch(clearExistingEntrySuccess(payload));\n            })\n            .catch(error => {\n                dispatch(ajaxCallError());\n                throw(error);\n            });\n    };\n};"]},"metadata":{},"sourceType":"module"}