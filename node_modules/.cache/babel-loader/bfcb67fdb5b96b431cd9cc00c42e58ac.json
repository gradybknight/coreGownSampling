{"ast":null,"code":"import * as types from './actionTypes';\nimport axios from 'axios';\nimport { beginAjaxCall, ajaxCallError } from './ajaxStatusActions';\nexport function getUsersInCoreSuccess(payload) {\n  return {\n    type: types.GET_USERS_IN_CORE_SUCCESS,\n    payload: payload\n  };\n}\n;\nexport function getUsersInCore() {\n  return function (dispatch) {\n    dispatch(beginAjaxCall());\n    axios.get('http://50.19.1.144:3000/usersincore').then(function (response) {\n      var payload = response.data;\n      dispatch(getUsersInCoreSuccess(payload));\n    }).catch(function (error) {\n      dispatch(ajaxCallError());\n      throw error;\n    });\n  };\n}\n;\nexport function getTransactionsInTimePeriodSuccess(payload) {\n  return {\n    type: types.GET_TRANSACTIONS_IN_TIME_PERIOD_SUCCESS,\n    payload: payload\n  };\n}\n;\nexport function getTransactionsInTimePeriod(timeBoundries) {\n  return function (dispatch) {\n    dispatch(beginAjaxCall());\n    axios.post('http://50.19.1.144:3000/transactionsintimeperiod', timeBoundries).then(function (response) {\n      var payload = response.data;\n      dispatch(getTransactionsInTimePeriodSuccess(payload));\n    }).catch(function (error) {\n      dispatch(ajaxCallError());\n      throw error;\n    });\n  };\n}\n;\nexport function logNewEntrySuccess(payload) {\n  return {\n    type: types.LOG_NEW_ENTRY_SUCCESS,\n    payload: payload\n  };\n}\nexport function logNewEntry(entryTransaction) {\n  return function (dispatch) {\n    dispatch(beginAjaxCall());\n    axios.post('http://50.19.1.144:3000/newentry', entryTransaction).then(function (response) {\n      var payload = response.data;\n      dispatch(logNewEntrySuccess(payload));\n    }).catch(function (error) {\n      dispatch(ajaxCallError());\n      throw error;\n    });\n  };\n}\n;\nexport function clearExistingEntryAndLogNewSuccess(payload) {\n  return {\n    type: types.CLEAR_EXISTING_ENTRY_AND_LOG_NEW_SUCCESS,\n    payload: payload\n  };\n}\n;\nexport function clearExistingEntryAndLogNew(existingTransactionID, newEntryTransaction) {\n  console.log('got here');\n  return function (dispatch) {\n    dispatch(beginAjaxCall());\n    console.log('gonna post');\n    axios.post('http://50.19.1.144:3000/systemclearedtransaction', existingTransactionID).then(function (response) {\n      console.log(response);\n      logNewEntry(newEntryTransaction);\n      var payload = '';\n      dispatch(clearExistingEntryAndLogNewSuccess(payload));\n    }).catch(function (error) {\n      dispatch(ajaxCallError());\n      throw error;\n    });\n  };\n}\n;","map":{"version":3,"sources":["/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/src/actions/transactionActions.js"],"names":["types","axios","beginAjaxCall","ajaxCallError","getUsersInCoreSuccess","payload","type","GET_USERS_IN_CORE_SUCCESS","getUsersInCore","dispatch","get","then","response","data","catch","error","getTransactionsInTimePeriodSuccess","GET_TRANSACTIONS_IN_TIME_PERIOD_SUCCESS","getTransactionsInTimePeriod","timeBoundries","post","logNewEntrySuccess","LOG_NEW_ENTRY_SUCCESS","logNewEntry","entryTransaction","clearExistingEntryAndLogNewSuccess","CLEAR_EXISTING_ENTRY_AND_LOG_NEW_SUCCESS","clearExistingEntryAndLogNew","existingTransactionID","newEntryTransaction","console","log"],"mappings":"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","sourcesContent":["import * as types from './actionTypes';\nimport axios from 'axios';\nimport {beginAjaxCall, ajaxCallError} from './ajaxStatusActions';\n\nexport function getUsersInCoreSuccess(payload) {\n    return ({type: types.GET_USERS_IN_CORE_SUCCESS, payload});\n};\nexport function getUsersInCore(){\n    return function (dispatch) {\n        dispatch(beginAjaxCall());\n        axios.get('http://50.19.1.144:3000/usersincore')\n            .then(function (response) {\n                let payload = response.data;\n                dispatch(getUsersInCoreSuccess(payload));\n            })\n            .catch(error => {\n                dispatch(ajaxCallError());\n                throw(error);\n            });\n    };\n};\n\nexport function getTransactionsInTimePeriodSuccess(payload){\n    return ({type: types.GET_TRANSACTIONS_IN_TIME_PERIOD_SUCCESS, payload});\n};\nexport function getTransactionsInTimePeriod(timeBoundries){\n    return function (dispatch) {\n        dispatch(beginAjaxCall());\n        axios.post('http://50.19.1.144:3000/transactionsintimeperiod', timeBoundries)\n            .then(function (response) {\n                let payload = response.data;\n                dispatch(getTransactionsInTimePeriodSuccess(payload));\n            })\n            .catch(error => {\n                dispatch(ajaxCallError());\n                throw(error);\n            });\n    }; \n};\n\nexport function logNewEntrySuccess(payload) {\n    return ({type: types.LOG_NEW_ENTRY_SUCCESS, payload});\n}\nexport function logNewEntry(entryTransaction) {\n    return function (dispatch) {\n        dispatch(beginAjaxCall());\n        axios.post('http://50.19.1.144:3000/newentry', entryTransaction)\n            .then(function (response) {\n                let payload = response.data;\n                dispatch(logNewEntrySuccess(payload));\n            })\n            .catch(error => {\n                dispatch(ajaxCallError());\n                throw(error);\n            });\n    }; \n};\n\nexport function clearExistingEntryAndLogNewSuccess(payload){\n    return ({type: types.CLEAR_EXISTING_ENTRY_AND_LOG_NEW_SUCCESS, payload});\n};\nexport function clearExistingEntryAndLogNew(existingTransactionID, newEntryTransaction){\n    console.log('got here');\n    return function(dispatch) {\n        dispatch(beginAjaxCall());\n        console.log('gonna post')\n        axios.post('http://50.19.1.144:3000/systemclearedtransaction', existingTransactionID)\n            .then(response =>{\n                console.log(response);\n                logNewEntry(newEntryTransaction);\n                let payload = '';\n                dispatch(clearExistingEntryAndLogNewSuccess(payload));\n            })\n            .catch(error => {\n                dispatch(ajaxCallError());\n                throw(error);\n            });\n    };\n};"]},"metadata":{},"sourceType":"module"}