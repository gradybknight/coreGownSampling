{"ast":null,"code":"import moment, { max } from 'moment'; // Business rules\n// A) Glove sample every day:\n//    1. countOfGloveSamplesInTimePeriodForUser(pass in shiftBoundry as timePeriod)\n// B) Gown samples \n//    1. if >= two days of entries then 2 gown samples\n//        a. countOfEntriesByDay(pass in weekBoundry)\n//        b. .numberOfEntryDays(array from 1a) --> number of entries\n//        c. countOfGloveSamplesInTimePeriodForUser(pass in weekBoundry) --> number of gown samples taken\n\nexport function allTransactionsForUserInTimePeriod(initials, transactions, timePeriod) {\n  //returns array of transactions\n  var matchingTransactions = transactions.filter(function (transaction) {\n    return transaction.initials === initials;\n  }).filter(function (transaction) {\n    return transaction.entrytimestamp >= timePeriod.lowerBoundry && transaction.entrytimestamp < timePeriod.upperBoundry;\n  });\n  return matchingTransactions;\n}\n;\nexport function userIsCurrentlyLoggedAsInCore(initials, transactions) {\n  //returns boolean\n  var matchingTransactions = transactions.filter(function (transaction) {\n    return transaction.initials === initials;\n  }).filter(function (transaction) {\n    return transaction.exittimestamp === null;\n  });\n\n  if (matchingTransactions.length > 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function usersInCore(transactions) {\n  //returns array of initials\n  var usersInCore = transactions.filter(function (transaction) {\n    return transaction.exittimestamp === null;\n  }).map(function (transaction) {\n    return transaction.initials;\n  });\n  return usersInCore;\n}\nexport function countOfGownSamplesInTimePeriodForUser(initials, transactions, timePeriod) {\n  //returns count as integer\n  var gownCount = 0;\n  allTransactionsForUserInTimePeriod(initials, transactions, timePeriod).forEach(function (transaction) {\n    gownCount = gownCount + transaction.gown;\n  });\n  return gownCount;\n}\nexport function countOfGloveSamplesInTimePeriodForUser(initials, transactions, timePeriod) {\n  //returns count as integer\n  var gloveCount = 0;\n  allTransactionsForUserInTimePeriod(initials, transactions, timePeriod).forEach(function (transaction) {\n    gloveCount = gloveCount + transaction.glove;\n  });\n  return gloveCount;\n}\nexport function truncateTimeFromMomentObjectAndReturnMoment(momentTimeObject) {\n  // moment.js object\n  var placeholder = momentTimeObject.toObject();\n  var returnedMomentTimeObject = moment().set({\n    'year': placeholder.year,\n    'months': placeholder.month,\n    'date': placeholder.date,\n    'hour': 0,\n    'minute': 0,\n    'second': 0,\n    'millisecond': 0\n  });\n  return returnedMomentTimeObject;\n}\nexport function countOfEntriesByDay(initials, transactions, timePeriod) {\n  // array of {date as epochTime, entryCount}\n  var usersTransactions = allTransactionsForUserInTimePeriod(initials, transactions, timePeriod);\n  var minDay = truncateTimeFromMomentObjectAndReturnMoment(moment(timePeriod.lowerBoundry));\n  var maxDay = truncateTimeFromMomentObjectAndReturnMoment(moment(timePeriod.upperBoundry));\n  var numberOfDaysInTimePeriod = maxDay.diff(minDay, \"days\");\n  var returnedArray = [];\n  console.log(\"min day: \".concat(minDay.format(\"DD-MMM-YYYY\"), \" || max day: \").concat(maxDay.format(\"DD-MMM-YYYY\")));\n\n  var _loop = function _loop(i) {\n    // moment objects are muteable.  holder date is a temp holder which gets mutated\n    var holderDay = truncateTimeFromMomentObjectAndReturnMoment(minDay);\n    var testedDate = holderDay.add(i, 'days');\n    console.log(\"tested date: \".concat(testedDate.format(\"DD-MMM-YYYY\"), \" || minDay: \").concat(minDay.format(\"DD-MMM-YYYY\")));\n    var counter = 0;\n    var dateSummaryObject = {\n      dateAsEpoch: '',\n      entries: 0\n    };\n    usersTransactions.forEach(function (transaction) {\n      console.log('got here');\n      var truncatedTransactionDate = truncateTimeFromMomentObjectAndReturnMoment(moment(transaction.entrytimestamp));\n      console.log(\"tested date: \".concat(testedDate.format(\"DD-MMM-YYYY\"), \" || transaction date: \").concat(truncatedTransactionDate.format(\"DD-MMM-YYYY\")));\n\n      if (testedDate.isSame(truncatedTransactionDate)) {\n        counter++;\n      }\n    });\n    dateSummaryObject.dateAsEpoch = testedDate.unix() * 1000;\n    dateSummaryObject.dateFormated = testedDate.format(\"DD-MMM-YYYY\");\n    dateSummaryObject.entries = counter;\n    returnedArray.push(dateSummaryObject);\n  };\n\n  for (var i = 0; i <= numberOfDaysInTimePeriod; i++) {\n    _loop(i);\n  }\n\n  console.log(returnedArray);\n  return returnedArray;\n}\nexport function numberOfEntryDays(arrayFromCountOfEntriesByDay) {\n  // returns count of number of days entering core\n  var entryDayCounter = 0;\n  arrayFromCountOfEntriesByDay.forEach(function (entry) {\n    if (entry.entries > 0) {\n      entryDayCounter++;\n    }\n  });\n  return entryDayCounter;\n}","map":{"version":3,"sources":["/Users/gradyknight/Documents/code/activeProjects/coreGownSampling/src/api/transactionManipulations.js"],"names":["moment","max","allTransactionsForUserInTimePeriod","initials","transactions","timePeriod","matchingTransactions","filter","transaction","entrytimestamp","lowerBoundry","upperBoundry","userIsCurrentlyLoggedAsInCore","exittimestamp","length","usersInCore","map","countOfGownSamplesInTimePeriodForUser","gownCount","forEach","gown","countOfGloveSamplesInTimePeriodForUser","gloveCount","glove","truncateTimeFromMomentObjectAndReturnMoment","momentTimeObject","placeholder","toObject","returnedMomentTimeObject","set","year","month","date","countOfEntriesByDay","usersTransactions","minDay","maxDay","numberOfDaysInTimePeriod","diff","returnedArray","console","log","format","i","holderDay","testedDate","add","counter","dateSummaryObject","dateAsEpoch","entries","truncatedTransactionDate","isSame","unix","dateFormated","push","numberOfEntryDays","arrayFromCountOfEntriesByDay","entryDayCounter","entry"],"mappings":"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","sourcesContent":["import moment, { max } from 'moment';\n\n// Business rules\n// A) Glove sample every day:\n//    1. countOfGloveSamplesInTimePeriodForUser(pass in shiftBoundry as timePeriod)\n// B) Gown samples \n//    1. if >= two days of entries then 2 gown samples\n//        a. countOfEntriesByDay(pass in weekBoundry)\n//        b. .numberOfEntryDays(array from 1a) --> number of entries\n//        c. countOfGloveSamplesInTimePeriodForUser(pass in weekBoundry) --> number of gown samples taken\n\nexport function allTransactionsForUserInTimePeriod(initials, transactions, timePeriod) {  //returns array of transactions\n    let matchingTransactions = transactions.filter(transaction => transaction.initials === initials)\n                                            .filter(transaction => (transaction.entrytimestamp >= timePeriod.lowerBoundry && transaction.entrytimestamp < timePeriod.upperBoundry));\n    return matchingTransactions;\n};\n\nexport function userIsCurrentlyLoggedAsInCore(initials, transactions) { //returns boolean\n    let matchingTransactions = transactions.filter(transaction => transaction.initials === initials)\n                                            .filter(transaction => transaction.exittimestamp === null);\n    if (matchingTransactions.length > 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function usersInCore(transactions) { //returns array of initials\n    let usersInCore = transactions.filter(transaction => transaction.exittimestamp === null)\n                                    .map(transaction => transaction.initials);\n    return usersInCore;\n\n}\n\nexport function countOfGownSamplesInTimePeriodForUser(initials, transactions, timePeriod) { //returns count as integer\n    let gownCount = 0;\n    allTransactionsForUserInTimePeriod(initials, transactions, timePeriod).forEach(transaction =>{\n        gownCount=gownCount + transaction.gown;\n    });\n    return gownCount;\n}\n\nexport function countOfGloveSamplesInTimePeriodForUser(initials, transactions, timePeriod) { //returns count as integer\n    var gloveCount = 0;\n    allTransactionsForUserInTimePeriod(initials, transactions, timePeriod).forEach(transaction =>{\n        gloveCount = gloveCount + transaction.glove;\n    });\n    return gloveCount;\n}\n\nexport function truncateTimeFromMomentObjectAndReturnMoment(momentTimeObject) { // moment.js object\n    let placeholder = momentTimeObject.toObject();\n    let returnedMomentTimeObject = moment().set({\n        'year': placeholder.year,\n        'months': placeholder.month,\n        'date': placeholder.date,\n        'hour':0,\n        'minute':0,\n        'second':0,\n        'millisecond':0\n    });\n    return returnedMomentTimeObject;\n}\n\nexport function countOfEntriesByDay(initials, transactions, timePeriod) { // array of {date as epochTime, entryCount}\n    let usersTransactions = allTransactionsForUserInTimePeriod(initials,transactions, timePeriod);\n    let minDay = truncateTimeFromMomentObjectAndReturnMoment(moment(timePeriod.lowerBoundry));\n    let maxDay = truncateTimeFromMomentObjectAndReturnMoment(moment(timePeriod.upperBoundry));\n    let numberOfDaysInTimePeriod = maxDay.diff(minDay,\"days\");\n    let returnedArray = []\n    console.log(`min day: ${minDay.format(\"DD-MMM-YYYY\")} || max day: ${maxDay.format(\"DD-MMM-YYYY\")}`)\n    for (let i = 0; i <= numberOfDaysInTimePeriod; i++) {\n        // moment objects are muteable.  holder date is a temp holder which gets mutated\n        let holderDay = truncateTimeFromMomentObjectAndReturnMoment(minDay);\n        let testedDate = holderDay.add(i,'days');\n        console.log(`tested date: ${testedDate.format(\"DD-MMM-YYYY\")} || minDay: ${minDay.format(\"DD-MMM-YYYY\")}`)\n        let counter = 0;\n        let dateSummaryObject = {dateAsEpoch:'',entries:0}\n        usersTransactions.forEach(transaction => {\n            console.log('got here')\n            let truncatedTransactionDate = truncateTimeFromMomentObjectAndReturnMoment(moment(transaction.entrytimestamp));\n            console.log(`tested date: ${testedDate.format(\"DD-MMM-YYYY\")} || transaction date: ${truncatedTransactionDate.format(\"DD-MMM-YYYY\")}`)\n            if (testedDate.isSame(truncatedTransactionDate)) {\n                counter++;\n            } \n        });\n        dateSummaryObject.dateAsEpoch = testedDate.unix()*1000;\n        dateSummaryObject.dateFormated = testedDate.format(\"DD-MMM-YYYY\");\n        dateSummaryObject.entries = counter;\n        returnedArray.push(dateSummaryObject);\n    }\n    console.log(returnedArray);\n    return returnedArray;\n}\n\nexport function numberOfEntryDays(arrayFromCountOfEntriesByDay) { // returns count of number of days entering core\n    let entryDayCounter = 0;\n    arrayFromCountOfEntriesByDay.forEach(entry => {\n        if (entry.entries > 0) {\n            entryDayCounter++;\n        }\n    });\n    return entryDayCounter;\n}\n"]},"metadata":{},"sourceType":"module"}